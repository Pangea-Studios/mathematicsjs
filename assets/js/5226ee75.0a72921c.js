"use strict";(self.webpackChunkmath=self.webpackChunkmath||[]).push([[102],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,k=c["".concat(u,".").concat(d)]||c[d]||p[d]||l;return n?r.createElement(k,o(o({ref:t},m),{},{components:n})):r.createElement(k,o({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6888:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const l={},o=void 0,i={unversionedId:"reference/docs/Classes/Conversions",id:"reference/docs/Classes/Conversions",title:"Conversions",description:"This reference has been auto-generated and therefore is not guaranteed to be using the stable release.",source:"@site/docs/reference/docs/Classes/Conversions.md",sourceDirName:"reference/docs/Classes",slug:"/reference/docs/Classes/Conversions",permalink:"/mathematicsjs/docs/reference/docs/Classes/Conversions",draft:!1,editUrl:"https://github.com/Pangea-Studios/mathematicsjs/blob/docs/website/docs/reference/docs/Classes/Conversions.md",tags:[],version:"current",lastUpdatedBy:"Noinkin",lastUpdatedAt:1685695603,formattedLastUpdatedAt:"Jun 2, 2023",frontMatter:{},sidebar:"reference",previous:{title:"Circle",permalink:"/mathematicsjs/docs/reference/docs/Classes/Circle"},next:{title:"Fraction",permalink:"/mathematicsjs/docs/reference/docs/Classes/Fraction"}},u={},s=[{value:"Conversions",id:"conversions",level:2},{value:"Conversions.convertLength(value, fromUnit, toUnit) \u21d2 <code>number</code>",id:"conversionsconvertlengthvalue-fromunit-tounit--number",level:3},{value:"Conversions.convertTemperature(value, fromUnit, toUnit) \u21d2 <code>number</code>",id:"conversionsconverttemperaturevalue-fromunit-tounit--number",level:3},{value:"Conversions.convertAngle(value, fromUnit, toUnit) \u21d2 <code>number</code>",id:"conversionsconvertanglevalue-fromunit-tounit--number",level:3},{value:"Conversions.convertMass(value, fromUnit, toUnit) \u21d2 <code>number</code>",id:"conversionsconvertmassvalue-fromunit-tounit--number",level:3},{value:"Conversions.convertVolume(value, fromUnit, toUnit) \u21d2 <code>number</code>",id:"conversionsconvertvolumevalue-fromunit-tounit--number",level:3}],m={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This reference has been auto-generated and therefore is not guaranteed to be using the stable release.")),(0,a.kt)("a",{name:"Conversions"}),(0,a.kt)("h2",{id:"conversions"},"Conversions"),(0,a.kt)("p",null,"Class containing all conversions."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": global class  "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Conversions"},"Conversions"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Conversions.convertLength"},".convertLength(value, fromUnit, toUnit)")," \u21d2 ",(0,a.kt)("code",null,"number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Conversions.convertTemperature"},".convertTemperature(value, fromUnit, toUnit)")," \u21d2 ",(0,a.kt)("code",null,"number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Conversions.convertAngle"},".convertAngle(value, fromUnit, toUnit)")," \u21d2 ",(0,a.kt)("code",null,"number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Conversions.convertMass"},".convertMass(value, fromUnit, toUnit)")," \u21d2 ",(0,a.kt)("code",null,"number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Conversions.convertVolume"},".convertVolume(value, fromUnit, toUnit)")," \u21d2 ",(0,a.kt)("code",null,"number"))))),(0,a.kt)("a",{name:"Conversions.convertLength"}),(0,a.kt)("h3",{id:"conversionsconvertlengthvalue-fromunit-tounit--number"},"Conversions.convertLength(value, fromUnit, toUnit) \u21d2 ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,"Converts a length value from one unit to another."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": static method of ",(0,a.kt)("a",{parentName:"p",href:"#Conversions"},(0,a.kt)("code",null,"Conversions")),(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Returns"),": ",(0,a.kt)("code",null,"number")," - - The converted value.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Throws"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"Error")," - If the conversion is not possible or invalid unit.")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"value"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"The value to be converted.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"fromUnit"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"LengthType")," ","|"," ",(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The unit to convert from.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"toUnit"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"LengthType")," ","|"," ",(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The unit to convert to.")))),(0,a.kt)("a",{name:"Conversions.convertTemperature"}),(0,a.kt)("h3",{id:"conversionsconverttemperaturevalue-fromunit-tounit--number"},"Conversions.convertTemperature(value, fromUnit, toUnit) \u21d2 ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,"Converts a temperature value from one unit to another."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": static method of ",(0,a.kt)("a",{parentName:"p",href:"#Conversions"},(0,a.kt)("code",null,"Conversions")),(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Returns"),": ",(0,a.kt)("code",null,"number")," - The temperature value converted to the desired unit.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Throws"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"Error")," - If the conversion is not possible or invalid unit.")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"value"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"The temperature value to convert.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"fromUnit"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"TemperatureType")," ","|"," ",(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The unit of the input value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"toUnit"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"TemperatureType")," ","|"," ",(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The desired output unit.")))),(0,a.kt)("a",{name:"Conversions.convertAngle"}),(0,a.kt)("h3",{id:"conversionsconvertanglevalue-fromunit-tounit--number"},"Conversions.convertAngle(value, fromUnit, toUnit) \u21d2 ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,"Converts an angle value from one unit of measurement to another."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": static method of ",(0,a.kt)("a",{parentName:"p",href:"#Conversions"},(0,a.kt)("code",null,"Conversions")),(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Returns"),": ",(0,a.kt)("code",null,"number")," - The value of the input angle converted to the specified unit of measurement.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Throws"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"Error")," - If the conversion is not possible or invalid unit.")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"value"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"The value of the angle to be converted.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"fromUnit"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"AngleType")," ","|"," ",(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The unit of measurement of the input angle.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"toUnit"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"AngleType")," ","|"," ",(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The unit of measurement to which the angle needs to be converted.")))),(0,a.kt)("a",{name:"Conversions.convertMass"}),(0,a.kt)("h3",{id:"conversionsconvertmassvalue-fromunit-tounit--number"},"Conversions.convertMass(value, fromUnit, toUnit) \u21d2 ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,"Converts a mass value from one unit to another."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": static method of ",(0,a.kt)("a",{parentName:"p",href:"#Conversions"},(0,a.kt)("code",null,"Conversions")),(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Returns"),": ",(0,a.kt)("code",null,"number")," - The converted value.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Throws"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"Error")," - If the conversion is not possible or invalid unit.")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"value"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"The value to be converted.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"fromUnit"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"MassType")," ","|"," ",(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The unit to convert from.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"toUnit"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"MassType")," ","|"," ",(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The unit to convert to.")))),(0,a.kt)("a",{name:"Conversions.convertVolume"}),(0,a.kt)("h3",{id:"conversionsconvertvolumevalue-fromunit-tounit--number"},"Conversions.convertVolume(value, fromUnit, toUnit) \u21d2 ",(0,a.kt)("code",null,"number")),(0,a.kt)("p",null,"Converts a volume value from one unit to another."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": static method of ",(0,a.kt)("a",{parentName:"p",href:"#Conversions"},(0,a.kt)("code",null,"Conversions")),(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Returns"),": ",(0,a.kt)("code",null,"number")," - The converted value.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Throws"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"Error")," - If the conversion is not possible or invalid unit.")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"value"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"number")),(0,a.kt)("td",{parentName:"tr",align:null},"The value to be converted.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"fromUnit"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#VolumeType"},(0,a.kt)("code",null,"VolumeType"))," ","|"," ",(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The unit to convert from.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"toUnit"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#VolumeType"},(0,a.kt)("code",null,"VolumeType"))," ","|"," ",(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The unit to convert to.")))))}p.isMDXComponent=!0}}]);